CMAKE_MINIMUM_REQUIRED(VERSION 3.11)

SET(VEDA_VERSION_API	"0")
SET(VEDA_VERSION_STABLE	"2")
SET(VEDA_VERSION_MAJOR	"11")
SET(VEDA_VERSION_MINOR	"1")
SET(VEDA_VERSION_RC	"")
SET(VEDA_VERSION	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}.${VEDA_VERSION_MINOR}${VEDA_VERSION_RC}")
SET(VEDA_VERSION_CMAKE	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}.${VEDA_VERSION_MINOR}")
SET(VEDA_VERSION_RPM	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}")
SET(LN_COMMAND "/usr/bin/ln")
SET(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION /opt/nec/ve/bin /opt/nec/ve/lib /opt/nec/ve/share)

PROJECT(VEDA VERSION "${VEDA_VERSION_CMAKE}" LANGUAGES C CXX)

IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE RELEASE CACHE STRING "" FORCE)
ENDIF()

## CMake Stuff -----------------------------------------------------------------
IF(NOT ${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
	MESSAGE(FATAL "Not supported operating system. Only Linux supported!")
ENDIF()

SET(CMAKE_INSTALL_RPATH "\$ORIGIN")
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

OPTION(BUILD_SHARED "Builds veda as shared library." ON)
IF(${BUILD_SHARED})
	SET(BUILD_TYPE SHARED)
ELSE()
	SET(BUILD_TYPE STATIC)
ENDIF()

## Pack VEDA -------------------------------------------------------------------
SET(VEDA_PACK_TYPE "RPM" CACHE STRING "")
SET_PROPERTY(CACHE VEDA_PACK_TYPE PROPERTY STRINGS "RPM" "WHL")

IF(VEDA_PACK_TYPE STREQUAL "RPM")
	MESSAGE(STATUS "Configured VEDA to build Python RPM")

	SET(AVEO_PATH "/opt/nec/ve/veos")
	SET(VEDA_INSTALL_DEFAULT "/opt/nec/ve")
	SET(VEDA_INSTALL_PATH "share/veoffload-veda")
	SET(VE_LIBRARY_PATH "/opt/nec/ve/veos/lib64")

	IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
		SET(CMAKE_INSTALL_PREFIX ${VEDA_INSTALL_DEFAULT} CACHE PATH "CMAKE install path" FORCE)
	ENDIF()

	SET(VEDA_SYMLINK ${CMAKE_CURRENT_BINARY_DIR}/veda)
	EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH} ${VEDA_SYMLINK})
	INSTALL(DIRECTORY ${VEDA_SYMLINK} DESTINATION share)

	SET(CPACK_PACKAGE_VERSION ${VEDA_VERSION})
	SET(CPACK_GENERATOR "RPM")
	SET(CPACK_PACKAGE_NAME "veoffload-veda")
	SET(CPACK_PACKAGE_RELEASE 1)
	SET(CPACK_PACKAGE_CONTACT "Nicolas Weber")
	SET(CPACK_PACKAGE_VENDOR "NEC Laboratories Europe")
	SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
	SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_PROCESSOR}") # ${CPACK_PACKAGE_RELEASE}.
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "VEDA Hybrid Programming API")
	SET(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/sx-aurora/veda")
	INCLUDE(CPack)
	ADD_CUSTOM_TARGET(pack COMMAND cpack3 WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
ELSEIF(VEDA_PACK_TYPE STREQUAL "WHL")
	MESSAGE(STATUS "Configured VEDA to build Python WHEEL")
	SET(VEDA_WHEEL_PATH "${CMAKE_CURRENT_BINARY_DIR}/__install__")
	SET(VEDA_INSTALL_PATH ".")
	SET(CMAKE_INSTALL_PREFIX "${VEDA_WHEEL_PATH}/veda")
	INCLUDE(${CMAKE_CURRENT_LIST_DIR}/python/CMakeLists.txt)

	SET(VEDA_WHEELS ${CMAKE_INSTALL_PREFIX}/dist/veda-${VEDA_VERSION}-py3-none-any.whl)
	ADD_CUSTOM_COMMAND(OUTPUT wheel-install COMMAND make install WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
	ADD_CUSTOM_COMMAND(OUTPUT ${VEDA_WHEELS} COMMAND python3 setup.py bdist_wheel WORKING_DIRECTORY ${VEDA_WHEEL_PATH})
	ADD_CUSTOM_TARGET(pack DEPENDS wheel-install ${VEDA_WHEELS})
ELSE()
	MESSAGE(FATAL_ERROR "Unknown VEDA_PACK_TYPE: ${VEDA_PACK_TYPE}")
ENDIF()

# CMake Variables
SET(AVEO_INCLUDE       "${AVEO_PATH}/include")
SET(AVEO_LIBRARY	"${AVEO_PATH}/lib64/libveo.so.1.0.0")

## Build VEDA ------------------------------------------------------------------
CONFIGURE_FILE(${CMAKE_CURRENT_LIST_DIR}/veda_version.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/veda_version.cpp)
CONFIGURE_FILE(${CMAKE_CURRENT_LIST_DIR}/veda_version.h.in ${CMAKE_CURRENT_BINARY_DIR}/veda_version.h)

FIND_LIBRARY(LIBUDEV_LIBRARY "libudev.so")
FIND_LIBRARY(LIBVEPRODUCTINFO_LIBRARY NAMES "libveproductinfo.so" PATHS ${VE_LIBRARY_PATH})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(${AVEO_INCLUDE})
SET(VEDA_SRC
	${CMAKE_CURRENT_BINARY_DIR}/veda_version.cpp
	${CMAKE_CURRENT_BINARY_DIR}/veda_version.h
	${CMAKE_CURRENT_LIST_DIR}/veda.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_args.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_context.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_device.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_mem.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_module.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_stream.cpp
)
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/veda/CMakeLists.txt)

ADD_LIBRARY(veda ${BUILD_TYPE} ${VEDA_SRC})
TARGET_LINK_LIBRARIES(veda ${AVEO_LIBRARY} ${LIBUDEV_LIBRARY} ${LIBVEPRODUCTINFO_LIBRARY} dl)
SET_TARGET_PROPERTIES(veda PROPERTIES LINK_FLAGS "-lpthread")
TARGET_COMPILE_OPTIONS(veda PRIVATE
	-Wuninitialized
	-Wunknown-pragmas
	-Wunused-function
	-Wunused-label
	-Wunused-value
	-Wunused-variable
	-Wno-return-local-addr)
SET_TARGET_PROPERTIES(veda 
	PROPERTIES 
	LINK_FLAGS
	"-Wl,--no-as-needed -Wl,-z,defs -Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/libveda.map"
)
SET_TARGET_PROPERTIES(veda
	PROPERTIES
	CXX_STANDARD		11
	CXX_STANDARD_REQUIRED	YES
	CXX_EXTENSIONS		NO
	SUFFIX			".so.${VEDA_VERSION_API}"
)

SET(VEDA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libveda.so")
FILE(WRITE ${VEDA_SYMLINK} "INPUT(libveda.so.${VEDA_VERSION_API})")

## Build VERA ------------------------------------------------------------------
SET(VERA_SRC
	${CMAKE_CURRENT_LIST_DIR}/vera.cpp
)
ADD_LIBRARY(vera ${BUILD_TYPE} ${VERA_SRC})
TARGET_LINK_LIBRARIES(vera veda)
TARGET_COMPILE_OPTIONS(vera PRIVATE
	-Wuninitialized
	-Wunknown-pragmas
	-Wunused-function
	-Wunused-label
	-Wunused-value
	-Wunused-variable
	-Wno-return-local-addr)
SET_TARGET_PROPERTIES(vera 
	PROPERTIES
	LINK_FLAGS
	"-Wl,--no-as-needed -Wl,-z,defs -Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/libvera.map"
)
SET_TARGET_PROPERTIES(vera
	PROPERTIES
	CXX_STANDARD		11
	CXX_STANDARD_REQUIRED	YES
	CXX_EXTENSIONS		NO
	SUFFIX			".so.${VEDA_VERSION_API}"
)

SET(VERA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libvera.so")
FILE(WRITE ${VERA_SYMLINK} "INPUT(libvera.so.${VEDA_VERSION_API})")
## Build VEDA-SMI --------------------------------------------------------------
ADD_EXECUTABLE(veda-smi ${CMAKE_CURRENT_LIST_DIR}/veda-smi.cpp)
TARGET_LINK_LIBRARIES(veda-smi veda)
SET_TARGET_PROPERTIES(veda-smi PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN/../lib64")
SET(VERA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libvera.so")
FILE(WRITE ${VERA_SYMLINK} "INPUT(libvera.so.${VEDA_VERSION_API})")
SET(VEDA_VSO "${CMAKE_CURRENT_BINARY_DIR}/ve/libveda.vso")

## Build VE code ---------------------------------------------------------------
ADD_SUBDIRECTORY(ve)

## Install Files ---------------------------------------------------------------
INSTALL(FILES 
	${CMAKE_CURRENT_BINARY_DIR}/veda_version.h
	${CMAKE_CURRENT_LIST_DIR}/veda.h
	${CMAKE_CURRENT_LIST_DIR}/veda_enums.h
	${CMAKE_CURRENT_LIST_DIR}/veda_macros.h
	${CMAKE_CURRENT_LIST_DIR}/veda_types.h
	${CMAKE_CURRENT_LIST_DIR}/veda_ptr.h
	${CMAKE_CURRENT_LIST_DIR}/vera.h
	${CMAKE_CURRENT_LIST_DIR}/vera_enums.h
	${CMAKE_CURRENT_LIST_DIR}/vera_types.h
DESTINATION ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH}/include)
INSTALL(TARGETS veda vera LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/lib64)
INSTALL(TARGETS veda-smi RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/bin)
INSTALL(FILES ${VEDA_SYMLINK} ${VERA_SYMLINK} ${VEDA_VSO} DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/lib64 PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_READ)
INSTALL(FILES ${CMAKE_CURRENT_LIST_DIR}/../LICENSE DESTINATION ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH})
INSTALL(FILES ${VEDA_VSO} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_READ)
SET(VEDA_SMI_SYMLINK "${CMAKE_INSTALL_PREFIX}/bin/veda-smi")
INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${LN_COMMAND} -s ${CMAKE_INSTALL_PREFIX}/veos/bin/veda-smi ${CMAKE_CURRENT_LIST_DIR}/veda-smi)")
INSTALL(FILES ${CMAKE_CURRENT_LIST_DIR}/veda-smi DESTINATION ${CMAKE_INSTALL_PREFIX}/bin )

## CMake Find Script -----------------------------------------------------------
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/CMakeLists.txt)

## Tests -----------------------------------------------------------------------
OPTION(WITH_TESTS "Enable tests" OFF)
IF(WITH_TESTS)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/ve)
	ADD_SUBDIRECTORY(tests)
ENDIF()
